name: CI for Spring Boot Microservices

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: andyg
    #       POSTGRES_PASSWORD: ""
    #       POSTGRES_DB: postgres
    #       POSTGRES_HOST_AUTH_METHOD: trust
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd="pg_isready -U andyg"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # - name: Set up JDK 17
    #   uses: actions/setup-java@v3
    #   with:
    #     distribution: 'temurin'
    #     java-version: 17
    #     cache: 'maven'

    # - name: Test user-service
    #   working-directory: docker/user-service
    #   run: |
    #     ./mvnw test

    # - name: Test product-service
    #   working-directory: docker/product-service
    #   run: |
    #     ./mvnw test

    # - name: Get Git Version
    #   run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # - name: Login to DockerHub
    #   run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    # - name: Build and Push Images
    #   run: |
    #     # Build the JAR for user-service first
    #     cd docker/user-service
    #     ./mvnw clean package -DskipTests  # Skip tests for faster builds
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:$VERSION .
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest .
    #     docker push ${{ secrets.DOCKER_USERNAME }}/user-service:$VERSION
    #     docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest
        
    #     # Build and push product-service
    #     cd ../product-service
    #     ./mvnw clean package -DskipTests
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:$VERSION .
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service:latest .
    #     docker push ${{ secrets.DOCKER_USERNAME }}/product-service:$VERSION
    #     docker push ${{ secrets.DOCKER_USERNAME }}/product-service:latest
        
    #     # Build and push order-service
    #     cd ../order-service
    #     ./mvnw clean package -DskipTests
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:$VERSION .
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service:latest .
    #     docker push ${{ secrets.DOCKER_USERNAME }}/order-service:$VERSION
    #     docker push ${{ secrets.DOCKER_USERNAME }}/order-service:latest

    - name: Integration test with Docker Compose
      run: |
        docker compose -f docker/order-service/docker-compose.yml up -d
        docker exec order-service-order-service-1 ./mvnw test

    # - name: Checkout ArgoCD Repo
    #   uses: actions/checkout@v4
    #   with:
    #     repository: andy1994new/argo
    #     token: ${{ secrets.GH_TOKEN }}

    # - name: Update ArgoCD Deployment Files
    #   run: |
    #     git config --global user.email "ci-bot---1@example.com"
    #     git config --global user.name "ci-bot---1"
    #     sed -i -e "s/andy2025\/user_service:.*/andy2025\/user_service:$VERSION/g" user-service.yaml
    #     sed -i -e "s/andy2025\/product_service:.*/andy2025\/product_service:$VERSION/g" product-service.yaml
    #     sed -i -e "s/andy2025\/order_service:.*/andy2025\/order_service:$VERSION/g" order-service.yaml
    #     git add -A
    #     git commit -m "Update yaml files to $VERSION"
    #     git push
